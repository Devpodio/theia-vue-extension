{
  "name": "Vue Pug Template",
  "scopeName": "text.pug.vue-pug",
  "fileTypes": [],
  "uuid": "91f7f4e6-f4b7-48f1-81bd-986d3bddd3db",
  "patterns": [
    {
      "comment": "Unbuffered (pug-only) comments.",
      "name": "comment.unbuffered.block.pug",
      "begin": "^(\\s*)//-",
      "end": "^(?!(\\1\\s)|\\s*$)"
    },
    {
      "comment": "Buffered (html) comments.",
      "name": "string.comment.buffered.block.pug",
      "begin": "^(\\s*)//",
      "end": "^(?!(\\1\\s)|\\s*$)",
      "patterns": [
        {
          "comment": "Buffered comments inside buffered comments will generate invalid html.",
          "name": "string.comment.buffered.block.pug",
          "match": "^\\s*(//)(?!-)",
          "captures": {
            "1": {
              "name": "invalid.illegal.comment.comment.block.pug"
            }
          }
        }
      ]
    },
    {
      "name": "comment.unbuffered.block.pug",
      "begin": "<!--",
      "end": "--\\s*>",
      "patterns": [
        {
          "name": "invalid.illegal.comment.comment.block.pug",
          "match": "--"
        }
      ]
    },
    {
      "comment": "Unbuffered code block.",
      "name": "source.js",
      "begin": "^(\\s*)-$",
      "end": "^(?!(\\1\\s)|\\s*$)",
      "patterns": [
        {
          "include": "source.js"
        }
      ]
    },
    {
      "comment": "Generic Pug filter.",
      "begin": "^(\\s*)((:(?=.))|(:$))",
      "beginCaptures": {
        "4": {
          "name": "invalid.illegal.empty.generic.filter.pug"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "patterns": [
        {
          "name": "name.generic.filter.pug",
          "begin": "\\G(?<=:)(?=.)",
          "end": "$",
          "patterns": [
            {
              "name": "invalid.illegal.name.generic.filter.pug",
              "match": "\\G\\("
            },
            {
              "name": "constant.language.name.generic.filter.pug",
              "match": "[\\w-]"
            },
            {
              "include": "#tag_attributes"
            },
            {
              "name": "invalid.illegal.name.generic.filter.pug",
              "match": "\\W"
            }
          ]
        }
      ]
    },
    {
      "comment": "Generated from dot_block_tag.py",
      "begin": "^(\\s*)(?=[\\w.#].*?\\.$)(?=(?:(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\\\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\\\\"(?:[^\\\\\"]|(?:(?<!\\\\)\\\\\\\\\"))*\\\\\")))*[^()]*\\))*)*)(?:(?:(?::\\s+)|(?<=\\)))(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\\\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\\\\"(?:[^\\\\\"]|(?:(?<!\\\\)\\\\\\\\\"))*\\\\\")))*[^()]*\\))*)*))*)\\.$)(?:(?:(#[\\w-]+)|(\\.[\\w-]+))|((?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))",
      "beginCaptures": {
        "2": {
          "name": "entity.other.attribute-name.id.pug"
        },
        "3": {
          "name": "entity.other.attribute-name.class.pug"
        },
        "4": {
          "name": "meta.tag.other entity.name.tag.pug"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "patterns": [
        {
          "include": "#tag_attributes"
        },
        {
          "include": "#complete_tag"
        },
        {
          "include": "source.vue#vue-directives"
        },
        {
          "name": "text.block.pug",
          "begin": "^(?=.)",
          "end": "$",
          "patterns": [
            {
              "include": "#inline_pug"
            },
            {
              "include": "text.pug#embedded_html"
            },
            {
              "include": "text.pug#html_entity"
            },
            {
              "include": "text.pug#interpolated_value"
            },
            {
              "include": "text.pug#interpolated_error"
            }
          ]
        }
      ]
    },
    {
      "comment": "All constructs that generally span a single line starting with any number of white-spaces.",
      "begin": "^\\s*",
      "end": "$",
      "patterns": [
        {
          "include": "#inline_pug"
        },
        {
          "include": "text.pug#blocks_and_includes"
        },
        {
          "include": "text.pug#unbuffered_code"
        },
        {
          "include": "text.pug#mixin_definition"
        },
        {
          "include": "text.pug#mixin_call"
        },
        {
          "include": "text.pug#flow_control"
        },
        {
          "include": "text.pug#case_conds"
        },
        {
          "comment": "Tag pipe text line.",
          "name": "text.block.pipe.pug",
          "begin": "\\|",
          "end": "$",
          "patterns": [
            {
              "include": "#inline_pug"
            },
            {
              "include": "source.vue#vue-interpolations"
            },
            {
              "include": "text.pug#embedded_html"
            },
            {
              "include": "text.pug#html_entity"
            },
            {
              "include": "text.pug#interpolated_value"
            },
            {
              "include": "text.pug#interpolated_error"
            }
          ]
        },
        {
          "include": "text.pug#printed_expression"
        },
        {
          "comment": "Line starting with characters incompatible with tag name/id/class is standalone text.",
          "begin": "\\G(?=(#[^\\{\\w-])|[^\\w.#])",
          "end": "$",
          "patterns": [
            {
              "begin": "</?(?=[!#])",
              "end": ">|$",
              "patterns": [
                {
                  "include": "#inline_pug"
                },
                {
                  "include": "source.vue#vue-interpolations"
                },
                {
                  "include": "text.pug#interpolated_value"
                },
                {
                  "include": "text.pug#interpolated_error"
                }
              ]
            },
            {
              "include": "#inline_pug"
            },
            {
              "include": "source.vue#vue-interpolations"
            },
            {
              "include": "text.pug#embedded_html"
            },
            {
              "include": "text.pug#html_entity"
            },
            {
              "include": "text.pug#interpolated_value"
            },
            {
              "include": "text.pug#interpolated_error"
            }
          ]
        },
        {
          "include": "#complete_tag"
        }
      ]
    }
  ],
  "repository": {
    "complete_tag": {
      "begin": "(?=[\\w.#])|(:\\s*)",
      "end": "(\\.?$)|(?=:.)",
      "patterns": [
        {
          "include": "text.pug#blocks_and_includes"
        },
        {
          "include": "text.pug#unbuffered_code"
        },
        {
          "include": "text.pug#mixin_call"
        },
        {
          "include": "text.pug#flow_control"
        },
        {
          "name": "invalid.illegal.name.tag.pug",
          "match": "(?<=:)\\w.*$"
        },
        {
          "include": "text.pug#tag_name"
        },
        {
          "include": "text.pug#tag_id"
        },
        {
          "include": "text.pug#tag_classes"
        },
        {
          "include": "#tag_attributes"
        },
        {
          "include": "text.pug#tag_mixin_attributes"
        },
        {
          "include": "source.vue#vue-directives"
        },
        {
          "match": "((\\.)\\s+$)|((:)\\s*$)",
          "captures": {
            "2": {
              "name": "invalid.illegal.end.tag.pug"
            },
            "4": {
              "name": "invalid.illegal.end.tag.pug"
            }
          }
        },
        {
          "include": "text.pug#printed_expression"
        },
        {
          "include": "#tag_text"
        }
      ]
    },
    "tag_attribute_name_paren": {
      "name": "entity.other.attribute-name.tag.pug",
      "begin": "\\(\\s*",
      "end": "\\)",
      "patterns": [
        {
          "include": "source.vue#vue-directives"
        },
        {
          "include": "#tag_attribute_name_paren"
        },
        {
          "include": "text.pug#tag_attribute_name"
        }
      ]
    },
    "tag_attributes": {
      "name": "meta.tag.other",
      "begin": "(\\(\\s*)",
      "end": "(\\))",
      "captures": {
        "1": {
          "name": "constant.name.attribute.tag.pug"
        }
      },
      "patterns": [
        {
          "include": "source.vue#vue-directives"
        },
        {
          "include": "#tag_attribute_name_paren"
        },
        {
          "include": "text.pug#tag_attribute_name"
        },
        {
          "name": "invalid.illegal.tag.pug",
          "match": "!(?!=)"
        },
        {
          "name": "attribute_value",
          "begin": "=\\s*",
          "end": "$|(?=,|(?:\\s+[^!%&*-+~|<>:?/])|\\))",
          "patterns": [
            {
              "include": "text.pug#string"
            },
            {
              "include": "text.pug#js_parens"
            },
            {
              "include": "text.pug#js_brackets"
            },
            {
              "include": "text.pug#js_braces"
            },
            {
              "include": "source.js"
            }
          ]
        },
        {
          "name": "attribute_value2",
          "begin": "(?<=[%&*-+~|<>:?/])\\s+",
          "end": "$|(?=,|(?:\\s+[^!%&*-+~|<>:?/])|\\))",
          "patterns": [
            {
              "include": "text.pug#string"
            },
            {
              "include": "text.pug#js_parens"
            },
            {
              "include": "text.pug#js_brackets"
            },
            {
              "include": "text.pug#js_braces"
            },
            {
              "include": "source.js"
            }
          ]
        }
      ]
    },
    "tag_text": {
      "name": "text.pug.tagtextbla",
      "begin": "(?=.)",
      "end": "$",
      "patterns": [
        {
          "include": "#inline_pug"
        },
        {
          "include": "#embedded_html"
        },
        {
          "include": "#html_entity"
        },
        {
          "include": "#interpolated_value"
        },
        {
          "include": "#interpolated_error"
        },
        {
          "include": "source.vue#vue-interpolations"
        }
      ]
    }
  }
}